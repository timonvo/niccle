cargo-features = ["per-package-target"]
[package]
authors.workspace = true
edition.workspace = true
license.workspace = true
name = "niccle_esp"
version = "0.1.0"
# Ensures that rust-analyzer/VSCode can analyze the code in esp/.
# Note that you still have to provide a "--target ..." argument to "cargo run" in order for it to
# pick espflash as the runner (see https://github.com/rust-lang/cargo/issues/10779).
default-target = "riscv32imac-unknown-none-elf"

[dependencies]
critical-section = "1.1.2"
esp-backtrace = { version = "0.7.0", features = [
  "exception-handler",
  "panic-handler",
  "print-uart",
] }
esp-println = { version = "0.6.0", features = ["log"] }
esp32c3-hal = { version = "0.12.0", optional = true }
esp32c6-hal = { version = "0.5.0", optional = true }
log = { workspace = true }
niccle = { path = "../" }
niccle_proc_macros = { path = "../proc_macros" }

[lib]
# We don't have any tests or benchmarks yet, and this silences the 'can't find crate for `test`'
# warning from `cargo fix --all-targets` in that case.
bench = false
test = false

[features]
# Build for esp32c6 by default. Use --no-default-features --feature esp32c3 to build for ESP32-C3.
default = ["esp32c6"]
esp32c3 = ["esp-backtrace/esp32c3", "esp-println/esp32c3", "esp32c3-hal"]
esp32c6 = ["esp-backtrace/esp32c6", "esp-println/esp32c6", "esp32c6-hal"]

[[example]]
# This example only supports the ESP32-C6 chip for the time being.
name = "arp_request"
required-features = ["esp32c6"]
