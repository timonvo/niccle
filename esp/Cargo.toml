cargo-features = ["per-package-target"]
[package]
authors.workspace = true
edition.workspace = true
license.workspace = true
name = "niccle_esp"
version = "0.1.0"
# Ensures that rust-analyzer/VSCode can analyze the code in esp/.
# Note that you still have to provide a "--target ..." argument to "cargo run" in order for it to
# pick espflash as the runner (see https://github.com/rust-lang/cargo/issues/10779).
default-target = "riscv32imac-unknown-none-elf"

[dependencies]
critical-section = { workspace = true }
esp-backtrace = { version = "0.9.0", features = [
  "exception-handler",
  "panic-handler",
  "print-uart",
] }
# We disable the default "critical-section" feature, since that can create situations where ongoing
# log calls prevent interrupts from firing.
byteorder = { workspace = true }
esp-println = { version = "0.8.0", default-features = false, features = [
  "colors",
  "log",
  "uart",
] }
esp32c3-hal = { version = "0.14.0", optional = true }
esp32c6-hal = { version = "0.7.0", optional = true }
log = { workspace = true }
# This is an optional (but enabled-by-default) dependency, because it isn't compatible with the
# ESP32-C3 chip (since it needs support for atomic instructions, which C3 chips don't have), and we
# need to be able to build the `cycle_counting` example binary (which doesn't depend on `niccle` for
# that chip).
crc32fast = { workspace = true }
heapless = "0.8.0"
niccle = { path = "../", optional = true }
niccle_proc_macros = { path = "../proc_macros" }
smoltcp = { workspace = true }

[lib]
# We don't have any tests or benchmarks yet, and this silences the 'can't find crate for `test`'
# warning from `cargo fix --all-targets` in that case.
bench = false
test = false

[features]
# Build for esp32c6 by default. Use "--no-default-features --feature esp32c3" to build for ESP32-C3
# (although only the `cycle_counting` binary is able to build with that configuration).
default = ["direct-vectoring", "esp32c6", "niccle"]
esp32c3 = ["esp-backtrace/esp32c3", "esp-println/esp32c3", "esp32c3-hal"]
esp32c6 = ["esp-backtrace/esp32c6", "esp-println/esp32c6", "esp32c6-hal"]
# The direct-vectoring feature significantly reduces the delay between an interrupt having fired and
# the interrupt routine being invoked, at the cost of a bit less flexible code.
direct-vectoring = [
  "esp32c3-hal?/direct-vectoring",
  "esp32c6-hal?/direct-vectoring",
]

[[example]]
# This example only supports the ESP32-C6 chip for the time being.
name = "arp_request"
# The "direct-vectoring" feature is not listed as required, but without it this binary will not be
# functional. The only useful thing this binary does in that case is show how slow the interrupt
# routine invocation latency is.
required-features = ["esp32c6"]

[[example]]
# This example only supports the ESP32-C6 chip for the time being.
name = "simple_signal_integrity_check"
required-features = ["esp32c6"]

[[example]]
# This example only supports the ESP32-C6 chip for the time being.
name = "smoltcp_ping"
required-features = ["esp32c6"]

[[example]]
# This example only supports the ESP32-C6 chip for the time being.
name = "smoltcp_http_get"
required-features = ["esp32c6"]
